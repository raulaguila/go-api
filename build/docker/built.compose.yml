name: api

volumes:

  postgres_volume:

networks:

  api_network:
    name: api_network
    driver: bridge

services:

  postgres:

    hostname: postgres
    container_name: api_postgres
    image: postgres:14.7-alpine
    restart: always
    volumes:
      - postgres_volume:/var/lib/postgresql/data
      - ../SQL:/docker-entrypoint-initdb.d
    command: -p ${POSTGRES_PORT}
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    environment:
      - TZ=${TZ}
      - POSTGRES_DB=${POSTGRES_BASE}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASS}
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_BASE}'" ]
      interval: 2s
      timeout: 10s
      retries: 5
      start_period: 1s
      start_interval: 2s
    networks:
      - api_network
    profiles: [ all, services ]

  backend:

    image: api_backend
    container_name: api_backend
    build:
      context: ../..
      dockerfile: build/docker/back/built.Dockerfile
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - ${API_PORT}:${API_PORT}
    tty: true
    environment:
      - TZ=${TZ}
    networks:
      - api_network
    profiles: [ all ]
