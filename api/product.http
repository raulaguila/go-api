@host = http://127.0.0.1:9000
@lang = en-US

###

# @name login
POST {{host}}/auth HTTP/1.1
Content-Type: application/json
Accept-Language: {{lang}}

{
  "login": "admin@admin.com",
  "password": "12345678"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Wrong status code");
        client.global.set("accessToken", response.body.accesstoken);
    });
%}

###

# @name getAll
GET {{host}}/product?page=1&limit=5&order=asc&sort=name HTTP/1.1
Authorization: Bearer {{accessToken}}
Accept-Language: {{lang}}
Content-Type: application/json

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Wrong status code");
    });
%}

###

# @name createItem
POST {{host}}/product HTTP/1.1
Authorization: Bearer {{accessToken}}
Accept-Language: {{lang}}
Content-Type: application/json

{
  "name": "Product Created"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 201, "Wrong status code");
        client.global.set("id", response.body.id);
        client.global.set("body_create", `{"name":"Product Created"}`);
    });
%}

###

# @name getCreatedItemByID
GET {{host}}/product/{{id}} HTTP/1.1
Authorization: Bearer {{accessToken}}
Accept-Language: {{lang}}
Content-Type: application/json

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Wrong status code");
        let auxSend = JSON.parse(client.global.get("body_create"));
        let auxRecv = response.body;
        for (let key in auxSend) {
            client.assert(auxSend[key] === auxRecv[key], "Wrong key value: " + key + "(" + auxSend[key] + " != " + auxRecv[key] + ")");
        }
    });
%}

###

# @name updateItemByID
PUT {{host}}//product/{{id}} HTTP/1.1
Authorization: Bearer {{accessToken}}
Accept-Language: {{lang}}
Content-Type: application/json

{
  "name": "Product Updated"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Wrong status code");
        client.global.set("id", response.body.id);
        client.global.set("body_update", `{"name":"Product Updated"}`);
    });
%}

###

# @name getUpdatedItemByID
GET {{host}}/product/{{id}} HTTP/1.1
Authorization: Bearer {{accessToken}}
Accept-Language: {{lang}}
Content-Type: application/json

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Wrong status code");
        let auxSend = JSON.parse(client.global.get("body_update"));
        let auxRecv = response.body;
        for (let key in auxSend) {
            client.assert(auxSend[key] === auxRecv[key], "Wrong key value: " + key + "(" + auxSend[key] + "!=" + auxRecv[key] + ")");
        }
    });
%}

###

# @name deleteItemByID
DELETE {{host}}/product HTTP/1.1
Authorization: Bearer {{accessToken}}
Accept-Language: {{lang}}
Content-Type: application/json

{
  "ids": [{{id}}]
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 204, "Wrong status code");
    });
%}

###

# @name getDeletedItemByID
GET {{host}}/product/{{id}} HTTP/1.1
Authorization: Bearer {{accessToken}}
Accept-Language: {{lang}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 404, "Wrong status code");
    });
%}